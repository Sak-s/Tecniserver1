# Generated by Django 4.2.6 on 2024-03-18 20:01

import core.models
import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=100, verbose_name='Nombre Categoria')),
                ('category_description', models.TextField(max_length=300, verbose_name='Descripcion Categoria')),
            ],
            options={
                'verbose_name': 'categoria',
                'verbose_name_plural': 'categorias',
                'db_table': 'categoria',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_client', models.CharField(max_length=100, verbose_name='Nombre Cliente')),
                ('last_name_client', models.CharField(max_length=100, verbose_name='Apellido Cliente')),
                ('cell_number', models.CharField(max_length=10, validators=[core.models.validate_phone_number], verbose_name='Celular Cliente')),
                ('address', models.CharField(max_length=200, verbose_name='Direccion Cliente')),
                ('date', models.DateField(default=django.utils.timezone.now, validators=[core.models.validate_future_date], verbose_name='Fecha Cita')),
                ('time', models.TimeField(help_text='Ingrese la hora de la fecha, ejemplo: "7:00" o "15:00"', validators=[core.models.validate_future_time], verbose_name='Hora Cita')),
                ('email', models.EmailField(max_length=200, verbose_name='Correo Cliente')),
            ],
            options={
                'verbose_name': 'cliente',
                'verbose_name_plural': 'clientes',
                'db_table': 'cliente_natural',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Engineer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engineer_na', models.CharField(max_length=100, verbose_name='Nombre Ingeniero')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator(message='Debe ingresar un correo electrónico válido.')], verbose_name='Correo Electrónico')),
                ('cell_number', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='El número de celular debe tener  10 dígitos', regex='^\\+?1?\\d{10}$')], verbose_name='Número de Teléfono')),
                ('nit', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='El nit debe contener entre 9 y 15 dígitos.', regex='^\\d{9,15}$')], verbose_name='Nit')),
                ('role', models.CharField(choices=[('CA', 'Ingeniero de Campo'), ('AX', 'Ingeniero Auxialiar')], max_length=3, verbose_name='Tipo de Ingeniero')),
            ],
            options={
                'verbose_name': 'Ingeniero',
                'verbose_name_plural': 'Ingenieros',
                'db_table': 'ingenieros',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Escarificacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_number', models.IntegerField(unique=True, verbose_name='Numero Prueba')),
                ('city', models.CharField(choices=[('Bogotá', 'Bogotá'), ('Medellín', 'Medellín'), ('Cartagena', 'Cartagena'), ('Cali', 'Cali'), ('Santa Marta', 'Santa Marta'), ('Barranquilla', 'Barranquilla'), ('Villavicencio', 'Villavicencio'), ('San Gil', 'San Gil'), ('Bucaramanga', 'Bucaramanga')], default='Bogotá', max_length=100, verbose_name='Ciudad')),
                ('location', models.CharField(max_length=100, verbose_name='Ubicación')),
                ('sampling_date', models.DateField(default=datetime.datetime.now, verbose_name='Fecha de Muestreo')),
                ('depth_1', models.CharField(help_text='Ingrese el valor de profundidad. Por ejemplo, 30-60.', max_length=10, verbose_name='Numero de profundidad (Muestra 1)')),
                ('depth_sample_1', models.CharField(choices=[('cm', 'Centímetros'), ('m', 'Metros')], max_length=10, verbose_name='Tipo de profundidad (Muestra 1)')),
                ('color', models.CharField(choices=[('marron_oscuro', 'Marrón oscuro'), ('marron_claro', 'Marrón claro'), ('negro', 'Negro'), ('gris', 'Gris')], max_length=50, verbose_name='Color')),
                ('texture_sample_1', models.CharField(choices=[('limosa', 'Limosa'), ('sólida', 'Sólida'), ('arcilla_húmeda', 'Arcilla Húmeda'), ('arena', 'Arena')], max_length=20, verbose_name='Textura del Suelo - Muestra 1')),
                ('sample_1_structure', models.CharField(choices=[('agregados_granulares', 'Agregados granulares'), ('agregados_bien_definidos', 'Agregados bien definidos'), ('agregados_estables', 'Agregados estables'), ('agregados_angulares', 'A gregados angulares'), ('agregados_moderadamente_estables', 'Agregados moderadamente estables')], max_length=100, verbose_name='Estructura de la Muestra 1')),
                ('sample_1_porosity', models.FloatField(verbose_name='Porosidad de la Muestra 1 (%)')),
                ('sample_1_apparent_density', models.FloatField(verbose_name='Densidad Aparente de la Muestra 1 ( g/cm³)')),
                ('ph_sample_1', models.CharField(choices=[('acido', 'Ácido'), ('lig_acido', 'Ligeramente Ácido'), ('neutro', 'Neutro')], max_length=20, verbose_name='pH Muestra 1')),
                ('sample_1_organic_matter', models.FloatField(verbose_name='Materia Orgánica de la Muestra 1 (%)')),
                ('compaction_equipment_1', models.CharField(choices=[('Espectrofotometros', 'Espectrofotómetros'), ('Equipos de agitación o mezclado', 'Equipos de agitación o mezclado'), ('Pipetas y buretas', 'Pipetas y buretas')], max_length=50, verbose_name='Equipo Utilizado')),
                ('depth_2', models.CharField(help_text='Ingrese el valor de profundidad. Por ejemplo, 30-60.', max_length=10, verbose_name='Numero de profundidad (Muestra 2)')),
                ('depth_sample_2', models.CharField(choices=[('cm', 'Centímetros'), ('m', 'Metros')], max_length=10, verbose_name='Tipo de profundidad (Muestra 2)')),
                ('texture_sample_2', models.CharField(choices=[('limosa', 'Limosa'), ('sólida', 'Sólida'), ('arcilla_húmeda', 'Arcilla Húmeda'), ('arena', 'Arena')], max_length=20, verbose_name='Textura del Suelo - Muestra 2')),
                ('sample_2_structure', models.CharField(choices=[('agregados_granulares', 'Agregados granulares'), ('agregados_bien_definidos', 'Agregados bien definidos'), ('agregados_estables', 'Agregados estables'), ('agregados_angulares', 'A gregados angulares'), ('agregados_moderadamente_estables', 'Agregados moderadamente estables')], max_length=100, verbose_name='Estructura de la Muestra 2')),
                ('sample_2_porosity', models.FloatField(verbose_name='Porosidad de la Muestra 2 (%)')),
                ('sample_2_apparent_density', models.FloatField(verbose_name='Densidad Aparente de la Muestra 2 ( g/cm³)')),
                ('ph_sample_2', models.CharField(choices=[('acido', 'Ácido'), ('lig_acido', 'Ligeramente Ácido'), ('neutro', 'Neutro')], max_length=20, verbose_name='pH Muestra 2')),
                ('sample_2_organic_matter', models.FloatField(verbose_name='Materia Orgánica de la Muestra 2 (%)')),
                ('sample_nu', models.CharField(choices=[('nitrogeno', 'Nitrógeno'), ('fosforo', 'Fósforo'), ('potasio', 'Potasio')], max_length=20, verbose_name='Análisis de Nutrientes (mg/kg)')),
                ('compaction_equipment_2', models.CharField(choices=[('Espectrofotometros', 'Espectrofotómetros'), ('Equipos de agitación o mezclado', 'Equipos de agitación o mezclado'), ('Pipetas y buretas', 'Pipetas y buretas')], max_length=50, verbose_name='Equipo Utilizado')),
                ('conclusions_recommendations', models.TextField(verbose_name='Conclusiones y Recomendaciones')),
                ('approval_status', models.CharField(choices=[('Aprobado', 'Aprobado'), ('No Aprobado', 'No Aprobado')], max_length=20, verbose_name='Estado de Aprobación')),
                ('engineer_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.engineer', verbose_name='Nombre Ingeniero')),
            ],
            options={
                'verbose_name': 'Escarificación',
                'verbose_name_plural': 'Escarificaciones',
                'db_table': 'escarificacion',
                'ordering': ['sampling_date'],
            },
        ),
        migrations.CreateModel(
            name='LaboratoryWorker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('laboratory_name', models.CharField(max_length=100, verbose_name='Nombre Laboratorista')),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator(message='Debe ingresar un correo electrónico válido.')], verbose_name='Correo Electrónico')),
                ('cell_number', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='El número de celular debe tener mas de 10 digitos', regex='^\\+?1?\\d{9,15}$')], verbose_name='Número de Teléfono')),
                ('nit', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='El nit debe contener entre 9 y 15 dígitos.', regex='^\\d{9,15}$')], verbose_name='Nit')),
                ('rol', models.CharField(choices=[('LAB', 'Laboratorista'), ('AUX', 'Auxiliar Laboratorista')], max_length=3, verbose_name='Tipo de Laboratorista')),
            ],
            options={
                'verbose_name': 'Laboratorista',
                'verbose_name_plural': 'Laboratoristas',
                'db_table': 'laboratoristas',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='LegalClient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registered_name', models.CharField(max_length=100, verbose_name='Nombre Cliente')),
                ('nit', models.BigIntegerField(validators=[core.models.validate_nit_length], verbose_name='NIT Cliente')),
                ('cell_number', models.CharField(max_length=10, validators=[core.models.validate_phone_number], verbose_name='Celular Cliente')),
                ('address', models.CharField(max_length=200, verbose_name='Direccion Cliente')),
                ('date', models.DateField(default=datetime.datetime.now, validators=[core.models.validate_future_date], verbose_name='Fecha Cita')),
                ('time', models.TimeField(help_text='Ingrese la hora de la fecha, ejemplo: "7:00" o "15:00"', validators=[core.models.validate_future_time], verbose_name='Hora Cita')),
                ('email', models.EmailField(max_length=200, verbose_name='Correo Cliente')),
            ],
            options={
                'verbose_name': 'ClienteJuridico',
                'verbose_name_plural': 'Clientes Juridicos',
                'db_table': 'cliente_juridico',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='TestPermeability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_number', models.IntegerField(help_text='Máximo 4 dígitos, no se permiten números negativos', unique=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999)], verbose_name='Número de Prueba')),
                ('test_date', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha de Prueba')),
                ('soil_type', models.CharField(choices=[('arcilloso', 'Arcilloso'), ('arenoso', 'Arenoso'), ('limoso', 'Limoso')], max_length=100, verbose_name='Tipo de Suelo')),
                ('grain_size', models.CharField(choices=[('fino', 'Fino'), ('medio', 'Medio'), ('grueso', 'Grueso')], max_length=100, verbose_name='Tamaño de Grano')),
                ('soil_porosity', models.CharField(choices=[('baja', 'Baja'), ('media', 'Media'), ('alta', 'Alta')], max_length=100, verbose_name='Porosidad del Suelo')),
                ('soil_compaction', models.CharField(choices=[('baja', 'Baja'), ('media', 'Media'), ('alta', 'Alta')], max_length=100, verbose_name='Compactación del Suelo')),
                ('soil_temperature', models.FloatField(choices=[(15.2, '15.2'), (18.9, '18.9'), (22.3, '22.3'), (25.6, '25.6'), (28.1, '28.1'), (30.7, '30.7'), (33.4, '33.4'), (36.2, '36.2'), (39.8, '39.8'), (42.5, '42.5')], verbose_name='Temperatura del Suelo')),
                ('soil_moisture_content', models.FloatField(help_text='Ingrese el contenido de humedad del suelo en porcentaje. Debe ser un número positivo. Por ejemplo, 0.15.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Contenido de Humedad del Suelo')),
                ('hydrostatic_pressure', models.FloatField(help_text='Ingrese la presión hidrostática en unidades específicas. Debe ser un número positivo. Por ejemplo, 100.0.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Presión Hidrostática')),
                ('loading_conditions', models.CharField(choices=[('alta', 'Alta'), ('media', 'Media'), ('baja', 'Baja'), ('otros', 'Otros')], max_length=100, verbose_name='Condiciones de Carga')),
                ('drainage_conditions', models.CharField(choices=[('buena', 'Buena'), ('regular', 'Regular'), ('mala', 'Mala'), ('otros', 'Otros')], max_length=100, verbose_name='Condiciones de Drenaje')),
                ('soil_chemistry', models.CharField(choices=[('PH: 7.2, Nitrógeno: 0.08%', 'PH: 7.2, Nitrógeno: 0.08%'), ('PH: 6.8, Nitrógeno: 0.06%', 'PH: 6.8, Nitrógeno: 0.06%'), ('PH: 5.9, Nitrógeno: 0.04%', 'PH: 5.9, Nitrógeno: 0.04%'), ('PH: 7.5, Nitrógeno: 0.09%', 'PH: 7.5, Nitrógeno: 0.09%'), ('PH: 6.2, Nitrógeno: 0.07%', 'PH: 6.2, Nitrógeno: 0.07%'), ('PH: 7.0, Nitrógeno: 0.05%', 'PH: 7.0, Nitrógeno: 0.05%'), ('PH: 6.5, Nitrógeno: 0.03%', 'PH: 6.5, Nitrógeno: 0.03%'), ('PH: 7.8, Nitrógeno: 0.11%', 'PH: 7.8, Nitrógeno: 0.11%'), ('PH: 6.0, Nitrógeno: 0.02%', 'PH: 6.0, Nitrógeno: 0.02%'), ('PH: 7.3, Nitrógeno: 0.1%', 'PH: 7.3, Nitrógeno: 0.1%')], max_length=100, verbose_name='Química del Suelo')),
                ('compaction_equipment_t', models.CharField(choices=[('Equipos de medición de presión y flujo', 'Equipos de medición de presión y flujo'), ('Cilindros de carga', 'Cilindros de carga'), ('Permeámetros de carga variable', 'Permeámetros de carga variable'), ('Permeámetros de carga constante', 'Permeámetros de carga constante'), ('Permeámetros de flujo constante', 'Permeámetros de flujo constante')], max_length=50, verbose_name='Equipo Utilizado')),
                ('permeability_velocity', models.FloatField(help_text='Ingrese la velocidad de permeabilidad en cm/s. Debe ser un número positivo. Por ejemplo, 0.25.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Velocidad de Permeabilidad')),
                ('intrinsic_permeability', models.FloatField(help_text='Ingrese la permeabilidad intrínseca en unidades específicas. Debe ser un número positivo. Por ejemplo, 0.003.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Permeabilidad Intrínseca')),
                ('permeability_coefficient', models.FloatField(help_text='Ingrese el coeficiente de permeabilidad en unidades específicas. Debe ser un número positivo. Por ejemplo, 2.5.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Coeficiente de Permeabilidad')),
                ('observations', models.TextField(verbose_name='Observaciones')),
                ('conclusions', models.TextField(verbose_name='Conclusiones')),
                ('approval_status', models.CharField(choices=[('Aprobado', 'Aprobado'), ('No Aprobado', 'No Aprobado')], max_length=20, verbose_name='Estado de la Prueba')),
                ('NameLaboratory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.laboratoryworker', verbose_name='Nombre Laboratorista')),
                ('legal_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.legalclient', verbose_name='Cliente Juridico')),
                ('natural_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.client', verbose_name='Cliente Natural')),
            ],
            options={
                'verbose_name': 'Prueba de Permeabilidad',
                'verbose_name_plural': 'Pruebas de Permeabilidad',
                'db_table': 'prueba_permeabilidad',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SoilCompactionTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=100, verbose_name='Ubicación del Sitio')),
                ('test_date', models.DateField(default=datetime.datetime.now, verbose_name='Fecha de la Prueba')),
                ('test_number', models.IntegerField(unique=True, verbose_name='Número Prueba')),
                ('soil_type', models.CharField(choices=[('Franco-arcilloso', 'Franco-arcilloso'), ('Arcilloso', 'Arcilloso'), ('Arenoso', 'Arenoso'), ('Limoso', 'Limoso'), ('Mixto', 'Mixto')], max_length=50, verbose_name='Tipo de Suelo')),
                ('natural_moisture_content', models.FloatField(verbose_name='Contenido de Humedad Natural (%)')),
                ('compaction_equipment_c', models.CharField(choices=[('Rodillo vibratorio', 'Rodillo vibratorio'), ('Placa Vibratoria', 'Placa Vibratoria'), ('Compactador de Ruedas', 'Compactador de Ruedas'), ('Compactador de Pison', 'Compactador de Pison'), ('Penetrómetro Dinámico', 'Penetrómetro Dinámico')], max_length=50, verbose_name='Equipo Utilizado')),
                ('number_of_passes', models.IntegerField(verbose_name='Número de Pasadas')),
                ('compaction_energy', models.FloatField(verbose_name='Energía de Compactación (%)')),
                ('adjustments_calibrations', models.CharField(choices=[('No se realizaron ajustes durante el proceso', 'No se realizaron ajustes durante el proceso'), ('Se realizaron 2 ajustes al proceso', 'Se realizaron 2 ajustes al proceso'), ('Se realizaron 3 ajustes al proceso', 'Se realizaron 3 ajustes al proceso'), ('Se realizaron 4 o mas ajustes al proceso', 'Se realizaron 4 o mas ajustes al proceso')], max_length=50, verbose_name='Ajustes/Calibraciones')),
                ('max_dry_density', models.FloatField(verbose_name='Densidad Seca Máxima (g/cm³)')),
                ('optimal_moisture_content', models.FloatField(verbose_name='Contenido de Humedad Óptimo (%)')),
                ('field_dry_density', models.FloatField(verbose_name='Densidad Seca en Campo (g/cm³)')),
                ('compaction_profile', models.TextField(verbose_name='Perfil de Compactación')),
                ('results_conclusions', models.TextField(verbose_name='Resultados y Conclusiones')),
                ('approval_status', models.CharField(choices=[('Aprobado', 'Aprobado'), ('No Aprobado', 'No Aprobado')], max_length=20, verbose_name='Estado de Aprobación')),
                ('engineer_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='soil_compaction_tests', to='core.engineer', verbose_name='Nombre Ingeniero')),
                ('legal_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.legalclient', verbose_name='Cliente Legal')),
                ('natural_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.client', verbose_name='Cliente Natural')),
            ],
            options={
                'verbose_name': 'Prueba De Compactacion',
                'verbose_name_plural': 'Prueba De Compactacion',
                'db_table': 'prueba_de_compactacion',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SoilAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_number', models.IntegerField(unique=True, verbose_name='Número Prueba')),
                ('location', models.CharField(max_length=100, verbose_name='Ubicación')),
                ('sampling_date', models.DateField(default=datetime.datetime.now, verbose_name='Fecha de Muestreo')),
                ('depth', models.CharField(help_text='Ingrese el valor de profundidad. Por ejemplo, 30-60.', max_length=10, verbose_name='Profundidad')),
                ('texture', models.CharField(choices=[('Franco-arcilloso', 'Franco-arcilloso'), ('Arcilloso', 'Arcilloso'), ('Arenoso', 'Arenoso'), ('Limoso', 'Limoso')], max_length=20, verbose_name='Textura del Suelo')),
                ('ph', models.CharField(choices=[('6.2', '6.2 unidades pH'), ('6.5', '6.5 unidades pH'), ('7.0', '7.0 unidades pH')], max_length=20, verbose_name='pH del Suelo')),
                ('organic_matter', models.FloatField(verbose_name='Materia Orgánica (%)')),
                ('cation_exchange_capacity', models.FloatField(verbose_name='Capacidad de Intercambio Catiónico (cmol/kg)')),
                ('total_nitrogen', models.FloatField(verbose_name='Nitrógeno Total (kg/ha)')),
                ('available_phosphorus', models.FloatField(verbose_name='Fósforo Disponible (ppm)')),
                ('available_potassium', models.FloatField(verbose_name='Potasio Disponible (ppm)')),
                ('iron', models.FloatField(verbose_name='Hierro (Fe) (ppm)')),
                ('manganese', models.FloatField(verbose_name='Manganeso (Mn) (ppm)')),
                ('zinc', models.FloatField(verbose_name='Zinc (Zn) (ppm)')),
                ('compaction_equipment', models.CharField(choices=[('Barrena de suelo', 'Barrena de suelo'), ('Muestreador de suelo', 'Muestreador de suelo'), ('Equipos de medición de pH', 'Equipos de medición de pH'), ('Espectrofotómetros', 'Espectrofotómetros'), ('Equipos de análisis de textura del suelo', 'Equipos de análisis de textura del suelo')], max_length=50, verbose_name='Equipo Utilizado')),
                ('conclusions_recommendations', models.TextField(verbose_name='Conclusiones y Recomendaciones')),
                ('approval_status', models.CharField(choices=[('Aprobado', 'Aprobado'), ('No Aprobado', 'No Aprobado')], max_length=20, verbose_name='Estado de Aprobación')),
                ('engineer_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.engineer', verbose_name='Nombre Ingeniero')),
                ('legal_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.legalclient', verbose_name='Cliente Legal')),
                ('natural_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.client', verbose_name='Cliente Natural')),
            ],
            options={
                'verbose_name': 'Análisis de Suelo',
                'verbose_name_plural': 'Análisis de Suelo',
                'db_table': 'analisisdesuelo',
                'ordering': ['sampling_date'],
            },
        ),
        migrations.CreateModel(
            name='ResistanceTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_number', models.IntegerField(help_text='Máximo 4 dígitos, no se permiten números negativos', unique=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999)], verbose_name='Número de Prueba')),
                ('soil_type', models.CharField(choices=[('arcilla', 'Arcilla'), ('arena', 'Arena'), ('limo', 'Limo'), ('suelo_orgánico', 'Suelo Orgánico'), ('roca', 'Roca'), ('otros', 'Otros')], max_length=50, verbose_name='Tipo de Suelo')),
                ('sample_depth', models.DecimalField(choices=[(0.5, 'Menos de 0.5 m'), (1.0, '0.5 - 1.0 m'), (1.5, '1.0 - 1.5 m'), (2.0, '1.5 - 2.0 m')], decimal_places=2, help_text='Profundidad de la muestra en metros', max_digits=5, verbose_name='Profundidad de la Muestra')),
                ('location_latitude', models.DecimalField(choices=[(-90, '90° S'), (0, '0°'), (90, '90° N')], decimal_places=6, help_text='Latitud de la ubicación', max_digits=9, verbose_name='Latitud de la Ubicación')),
                ('location_longitude', models.DecimalField(choices=[(-180, '180° W'), (-170, '170° W'), (0, '0°'), (170, '170° E'), (180, '180° E')], decimal_places=6, help_text='Longitud de la ubicación', max_digits=9, verbose_name='Longitud de la Ubicación')),
                ('test_date', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha de Prueba')),
                ('test_method', models.CharField(choices=[('ensayo_permeabilidad_constante', 'Ensayo de Permeabilidad Constante'), ('ensayo_piezoconometro', 'Ensayo de Piezoconómetro'), ('ensayo_laboratorio', 'Ensayo de Laboratorio')], max_length=100, verbose_name='Método de Prueba')),
                ('procedure', models.TextField(verbose_name='Procedimiento')),
                ('permeability', models.DecimalField(blank=True, decimal_places=6, help_text='Ingrese el valor de permeabilidad en metros por segundo (m/s). Por ejemplo, 0.005.', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Permeabilidad (m/s)')),
                ('hydraulic_conductivity', models.DecimalField(blank=True, decimal_places=6, help_text='Ingrese el valor de conductividad hidráulica en metros por segundo (m/s). Por ejemplo, 0.008.', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Conductividad Hidráulica (m/s)')),
                ('compaction_equipment_r', models.CharField(choices=[('Cilindros de carga', 'Cilindros de carga'), ('Equipo de triaxial', 'Equipo de triaxial'), ('Equipos de consolidación', 'Equipos de consolidación'), ('Penetrómetros', 'Penetrómetros'), ('Cargas de placa', 'Cargas de placa')], max_length=50, verbose_name='Equipo Utilizado')),
                ('additional_comments', models.TextField(blank=True, null=True, verbose_name='Comentarios Adicionales')),
                ('approval_status', models.CharField(choices=[('Aprobado', 'Aprobado'), ('No Aprobado', 'No Aprobado')], max_length=20, verbose_name='Estado de la Prueba')),
                ('NameLaboratory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.laboratoryworker', verbose_name='Nombre Laboratorista')),
                ('legal_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.legalclient', verbose_name='Cliente Juridico')),
                ('natural_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.client', verbose_name='Cliente Natural')),
            ],
            options={
                'verbose_name': 'Prueba de Resistencia',
                'verbose_name_plural': 'Pruebas de Resistencia',
                'db_table': 'prueba_resistencia',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PetrographicAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_number', models.IntegerField(help_text='Máximo 4 dígitos, no se permiten números negativos', unique=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999)], verbose_name='Número de Prueba')),
                ('test_date', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha de Prueba')),
                ('sample_description', models.TextField(verbose_name='Descripción de la Muestra')),
                ('mineral_composition', models.CharField(choices=[('Cuarzo', 'Cuarzo'), ('Feldespato', 'Feldespato'), ('Mica', 'Mica'), ('Arcilla', 'Arcilla'), ('Olivino', 'Olivino'), ('Piroxeno', 'Piroxeno'), ('Anfíbol', 'Anfíbol'), ('Calcita', 'Calcita'), ('Dolomita', 'Dolomita'), ('Yeso', 'Yeso'), ('Halita', 'Halita'), ('Biotita', 'Biotita'), ('Apatita', 'Apatita'), ('Garnet', 'Garnet'), ('Epidota', 'Epidota'), ('Esfena', 'Esfena'), ('Hematita', 'Hematita'), ('Magnetita', 'Magnetita'), ('Ilmenita', 'Ilmenita'), ('Rutilo', 'Rutilo'), ('Granate', 'Granate'), ('Pirita', 'Pirita'), ('Anhidrita', 'Anhidrita'), ('Baritina', 'Baritina'), ('Esmeril', 'Esmeril'), ('Otro', 'Otro')], max_length=100, verbose_name='Composición Mineral')),
                ('grain_size_distribution', models.CharField(choices=[('Fino', 'Fino'), ('Medio', 'Medio'), ('Grueso', 'Grueso'), ('Mixto', 'Mixto')], max_length=100, verbose_name='Distribución del Tamaño de Grano')),
                ('texture', models.CharField(choices=[('Fino', 'Fino'), ('Medio', 'Medio'), ('Grueso', 'Grueso'), ('Poroso', 'Poroso'), ('Compacto', 'Compacto'), ('Masivo', 'Masivo'), ('Foliar', 'Foliar'), ('Bandeados', 'Bandeados'), ('Otro', 'Otro')], max_length=100, verbose_name='Textura')),
                ('porosity', models.CharField(choices=[('Baja', 'Baja'), ('Media', 'Media'), ('Alta', 'Alta')], max_length=100, verbose_name='Porosidad')),
                ('cementation', models.CharField(choices=[('Arcilla', 'Arcilla'), ('Caliza', 'Caliza'), ('Cuarzo', 'Cuarzo'), ('Óxidos de Hierro', 'Óxidos de Hierro'), ('Sílice', 'Sílice'), ('Carbonatos', 'Carbonatos'), ('Feldespatos', 'Feldespatos'), ('Yeso', 'Yeso'), ('Halita', 'Halita'), ('Baritina', 'Baritina'), ('Otros', 'Otros')], max_length=100, verbose_name='Cementación')),
                ('mineral_identification', models.CharField(choices=[('Cuarzo', 'Cuarzo'), ('Feldespato', 'Feldespato'), ('Mica', 'Mica'), ('Arcilla', 'Arcilla'), ('Olivino', 'Olivino'), ('Piroxeno', 'Piroxeno'), ('Anfíbol', 'Anfíbol'), ('Calcita', 'Calcita'), ('Dolomita', 'Dolomita'), ('Yeso', 'Yeso'), ('Halita', 'Halita'), ('Biotita', 'Biotita'), ('Apatita', 'Apatita'), ('Garnet', 'Garnet'), ('Epidota', 'Epidota'), ('Esfena', 'Esfena'), ('Hematita', 'Hematita'), ('Magnetita', 'Magnetita'), ('Ilmenita', 'Ilmenita'), ('Rutilo', 'Rutilo'), ('Granate', 'Granate'), ('Pirita', 'Pirita'), ('Anhidrita', 'Anhidrita'), ('Baritina', 'Baritina'), ('Esmeril', 'Esmeril'), ('Otro', 'Otro')], max_length=100, verbose_name='Identificación Mineral')),
                ('mineral_quantification', models.CharField(choices=[('Bajo', 'Bajo'), ('Medio', 'Medio'), ('Alto', 'Alto')], max_length=100, verbose_name='Cuantificación Mineral')),
                ('rock_type', models.CharField(choices=[('Ígnea', 'Ígnea'), ('Sedimentaria', 'Sedimentaria'), ('Metamórfica', 'Metamórfica'), ('Otro', 'Otro')], max_length=100, verbose_name='Tipo de Roca')),
                ('color', models.CharField(choices=[('Blanco', 'Blanco'), ('Gris', 'Gris'), ('Negro', 'Negro'), ('Rojo', 'Rojo'), ('Amarillo', 'Amarillo'), ('Verde', 'Verde'), ('Azul', 'Azul'), ('Marrón', 'Marrón'), ('Otro', 'Otro')], max_length=50, verbose_name='Color')),
                ('compaction_equipment_P', models.CharField(choices=[('Microscopio Petrográfico', 'Microscopio Petrográfico'), ('Lupa Geológica', 'Lupa Geológica'), ('Prensa de Montaje', 'Prensa de Montaje'), ('Molino de Roca', 'Molino de Roca'), ('Horno', 'Horno')], max_length=50, verbose_name='Equipo Utilizado')),
                ('conclusions', models.TextField(verbose_name='Conclusiones')),
                ('approval_status', models.CharField(choices=[('Aprobado', 'Aprobado'), ('No Aprobado', 'No Aprobado')], max_length=20, verbose_name='Estado de la Prueba')),
                ('legal_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.legalclient', verbose_name='Cliente Legal')),
                ('name_laboratory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.laboratoryworker', verbose_name='Nombre Laboratorista')),
                ('natural_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.client', verbose_name='Cliente Natural')),
            ],
            options={
                'verbose_name': 'Análisis Petrográfico',
                'verbose_name_plural': 'Análisis Petrográficos',
                'db_table': 'analisis_petrograficos',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='LaboratoryTrial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pdf_file_1', models.FileField(blank=True, upload_to='pdfs/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='PDF 1')),
                ('pdf_file_2', models.FileField(blank=True, upload_to='pdfs/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='PDF 2')),
                ('pdf_file_3', models.FileField(blank=True, upload_to='pdfs/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='PDF 3')),
                ('test_date', models.DateField(default=django.utils.timezone.now, verbose_name='Fecha de Prueba')),
                ('city', models.CharField(choices=[('Bogotá', 'Bogotá'), ('Medellín', 'Medellín'), ('Cartagena', 'Cartagena'), ('Cali', 'Cali'), ('Santa Marta', 'Santa Marta'), ('Barranquilla', 'Barranquilla'), ('Villavicencio', 'Villavicencio'), ('San Gil', 'San Gil'), ('Bucaramanga', 'Bucaramanga')], default='Bogotá', max_length=100, verbose_name='Ciudad')),
                ('address', models.CharField(max_length=100, verbose_name='Dirección')),
                ('laboratory_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.laboratoryworker', verbose_name='Nombre Laboratorista')),
                ('legal_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.legalclient', verbose_name='Cliente Legal')),
                ('natural_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.client', verbose_name='Cliente Natural')),
                ('test_type_1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.petrographicanalysis', verbose_name='Tipo Prueba (Análisis Petrográfico)')),
                ('test_type_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.testpermeability', verbose_name='Tipo Prueba (Prueba de Permeabilidad)')),
                ('test_type_3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.resistancetest', verbose_name='Tipo Prueba (Prueba de Resistencia)')),
            ],
            options={
                'verbose_name': 'Pruebas de Laboratorio',
                'verbose_name_plural': 'Pruebas de Laboratorio',
                'db_table': 'pruebas_laboratorio',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name_invent', models.CharField(max_length=200, verbose_name='Nombre Articulo')),
                ('amount_invent', models.CharField(max_length=100, verbose_name='Cantidad Articulo')),
                ('description_invent', models.TextField(max_length=300, verbose_name='Descripcion Articulo')),
                ('image_invent', models.ImageField(blank=True, null=True, upload_to='media', verbose_name='Imagen')),
                ('category_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.category', verbose_name='Categoria')),
            ],
            options={
                'verbose_name': 'Inventario',
                'verbose_name_plural': 'Inventarios',
                'db_table': 'inventario',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='FielTrial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pdf_file', models.FileField(blank=True, upload_to='pdfs/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='PDF 1')),
                ('pdf_file_1', models.FileField(blank=True, upload_to='pdfs/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='PDF 2')),
                ('pdf_file_2', models.FileField(blank=True, upload_to='pdfs/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])], verbose_name='PDF 3')),
                ('date', models.DateField(default=datetime.datetime.now, verbose_name='Fecha')),
                ('city', models.CharField(choices=[('Bogotá', 'Bogotá'), ('Medellín', 'Medellín'), ('Cartagena', 'Cartagena'), ('Cali', 'Cali'), ('Santa Marta', 'Santa Marta'), ('Barranquilla', 'Barranquilla'), ('Villavicencio', 'Villavicencio'), ('San Gil', 'San Gil'), ('Bucaramanga', 'Bucaramanga')], default='Bogotá', max_length=100, verbose_name='Ciudad')),
                ('address', models.CharField(max_length=100, verbose_name='Direccion')),
                ('TypeOfTest_comp', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.soilcompactiontest', verbose_name='Tipo Prueba (Prueba de Compactación)')),
                ('TypeOfTest_es', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.escarificacion', verbose_name='Tipo Prueba (Escarificaciones)')),
                ('TypeOfTest_soi', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.soilanalysis', verbose_name='Tipo Prueba (Análisis de suelo)')),
                ('engineer_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engineer_trial', to='core.engineer', verbose_name='Nombre Ingeniero')),
                ('legal_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.legalclient', verbose_name='Cliente Legal')),
                ('natural_client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.client', verbose_name='Cliente Natural')),
            ],
            options={
                'verbose_name': 'Prueba De Campo',
                'verbose_name_plural': 'PruebasDeCampo',
                'db_table': 'prueba_de_campo',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='escarificacion',
            name='legal_client',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.legalclient', verbose_name='Cliente Legal'),
        ),
        migrations.AddField(
            model_name='escarificacion',
            name='natural_client',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.client', verbose_name='Cliente Natural'),
        ),
    ]
